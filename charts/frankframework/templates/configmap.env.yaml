{{/*
ConfigMap for generating default environment variables for the app
*/}}
{{- $dtapStage := .Values.application.dtap.stage | required "The DTAP stage is a required value. Ref: https://frank-manual.readthedocs.io/en/latest/deploying/dtapAndProperties.html" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "frankframework.fullname" . }}-env
  labels:
    {{- include "frankframework.labels" . | nindent 4 }}
data:
  {{- if .Values.console.enabled }}
  management.gateway.inbound.class: "org.frankframework.management.gateway.HazelcastInboundGateway"
  {{- end }}
  {{- with .Values.application }}
  # Enable Narayana transaction manager
  application.server.type.custom: "{{ .server.transactionManager }}"
  JAVA_OPTS: "\
  {{- with .memory }}
  {{- if .percentage }}
  -XX:InitialRAMPercentage={{ .minimum }} \
  -XX:MaxRAMPercentage={{ .maximum }} \
  {{- else }}
  -Xms{{ .minimum }} -Xmx{{ .maximum }}
  {{- end }}
  {{- end }}
  {{- if $.Values.persistence.enabled }}
  -XX:HeapDumpPath=/heap-dumps/$(hostname)-$(date --iso-8601=seconds).hprof \
  {{- else }}
  -XX:HeapDumpPath=/usr/local/tomcat/logs
  {{- end }}
  -XX:+HeapDumpOnOutOfMemoryError \
  -XX:+ExitOnOutOfMemoryError \
  {{ .javaOpts }}"
  TZ: "{{ $.Values.timeZone }}"
  instance.name: "{{ include "frankframework.instance.name" $ }}"
  dtap.stage: "{{ $dtapStage }}"
  dtap.side: "{{ .dtap.side | default $.Release.Namespace }}"
  {{- with .configurations.names }}
  configurations.names: "{{ join "," . }}"
  {{- end }}
  application.security.http.authentication: "{{ .security.http.authentication }}"
  # Reverse proxy/ingress should be used for https
  application.security.http.transportGuarantee: "NONE"
  {{- if .security.http.authentication }}
  {{- if .security.http.activeDirectory.enabled }}
  {{- with .security.http.activeDirectory }}
  application.security.http.authenticators: "AdAuthenticator"
  application.security.http.authenticators.AdAuthenticator.type: "AD"
  application.security.http.authenticators.AdAuthenticator.baseDn: "{{ .baseDn }}"
  application.security.http.authenticators.AdAuthenticator.url: "{{ .url }}"
  servlet.HttpListener.authenticator: "AdAuthenticator"
  application.security.console.authentication.type: "AD"
  application.security.console.authentication.baseDn: "{{ .baseDn }}"
  application.security.console.authentication.url: "{{ .url }}"
  {{- end }}
  {{- end }}
  {{- if .security.http.localUsers }}
{{/*  application.security.console.authentication.type: "YML"*/}}
  {{- end }}
  {{- end }}
  {{- if .credentials.secret }}
  credentialFactory.class: "nl.nn.credentialprovider.PropertyFileCredentialFactory"
  credentialFactory.map.properties: "/opt/frank/secrets/{{ .credentials.key }}"
  {{- end }}
  helm.release.version: "{{ $.Chart.Version }}"
  container.image: "{{ $.Values.image.registry }}{{ if $.Values.image.registry }}/{{ end }}{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
  ADDITIONAL.PROPERTIES.FILE: "DeploymentSpecifics.properties,BuildInfo.properties,ServerSpecifics_${application.server.type}${application.server.type.custom}.properties,SideSpecifics_${dtap.side}.properties,StageSpecifics_${dtap.stage}.properties,K8sSpecifics.yaml,Test.properties"
  {{- if .environmentVariables }}
  {{- toYaml .environmentVariables | nindent 2 }}
  {{- end -}}
  {{- end -}}
