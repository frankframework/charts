## @section Common parameters
##

## @param nameOverride String to partially override fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override fullname template
##
fullnameOverride: ""

## @section Frank!Framework image parameters
## @descriptionStart
## The image is pulled from nexus.frankframework.org by default. The images located there will be kept for as long as possible.
## Here are the images available:
## https://nexus.frankframework.org/#browse/browse:frankframework-docker:v2%2Ffrankframework%2Ftags/
## If you want to use a specific nightly, you can use the images on docker.io:
## https://hub.docker.com/r/frankframework/frankframework/tags
## @descriptionEnd
##

## Frank!Framework image
## @param image.registry Frank!Framework image registry
## @param image.repository Frank!Framework image repository
## @param image.tag Frank!Framework image tag (immutable tags are recommended)
##
image:
  registry: nexus.frankframework.org
  repository: frankframework
  tag: ""
  ## @param image.pullPolicy Frank!Framework image pull policy
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## @param image.pullSecrets Frank!Framework image pull secrets
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - name: myRegistryKeySecretName
  ##
  pullSecrets: []

## @section Frank!Framework application parameters
##

application:
  ## @param application.memory.percentage Set if the values for the memory are in percentages
  ## @param application.memory.minimum Sets the initial size of the heap that will be used by the Frank!Framework
  ## @param application.memory.maximum Sets the maximum size of the heap that will be used by the Frank!Framework
  ## For Java 8 it is best suited to use the same amount of memory for both the minimum and maximum.
  ## For Java 11 and above, it is possible to use percentages. E.g. minimum: 20.0, maximum: 80.0.
  ## ref: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BABDJJFI
  ##
  memory:
    percentage: false
    minimum: 4G
    maximum: 4G
  ## @param application.dtap.stage (Required) Set the `DTAP` stage. Options: `LOC`, `DEV`, `TST`, `ACC`, `PRD`
  ## @param application.dtap.side Set the `DTAP` side of where the instance is running
  ##
  dtap:
    stage: ""
    side: ""
  ## @param application.credentials.secret Set the secret name of the existing secret
  ## @param application.credentials.key Set the key inside the secret that contains the data (e.g. `credentials.properties`)
  ##
  credentials:
    secret: ""
    key: ""
  ## @param application.instance.name Set the name of the Frank! instance (default is the `fullname`)
  ##
  instance:
    name: ""
  ## @param application.configurations.names [array] Set the configurations to load. Leave empty to use the default
  ## e.g.
  ## configurations.names:
  ##   - main
  ##
  configurations:
    names: []
  ## @param application.resources Set Yaml properties for configuring the connections for theFrank!Framework
  ## @extra application.resources Note: If kept empty no resources.yml will be generated, this can be used if the application already has a resources.yml
  ## @extra application.resources Note: Not all options will be documented here, please refer to the Frank!Framework documentation for more information.
  ## Example ref: https://github.com/frankframework/frankframework/blob/master/core/src/test/resources/resources.yml
  ## Implementation ref: https://github.com/frankframework/frankframework/blob/master/core/src/main/java/org/frankframework/jdbc/datasource/FrankResources.java
  ##
  resources: {}
  security:
    ## @param application.security.certificateStores [array] Define certificate (key/trust) stores to mount in the resources folder of the Frank!
    ## @param application.security.certificateStores.secretName [string, nullable] Name of the secret where the certificate store is located in
    ## @param application.security.certificateStores.key [string, nullable] The key in the secret where the certificate store is located in
    ## @param application.security.certificateStores.resourceUrl [string, nullable] The path to the certificate store in the Resource folder, the key will be used as default value
    ##
    certificateStores: []
    http:
      ## @param application.security.http.authentication Set http authentication for the Frank!
      ##
      authentication: false
      ## @param application.security.http.localUsers [array] Set localUsers who can log in on the Frank!
      ## @extra application.security.http.localUsers Note: If kept empty no localUsers.yml will be generated, this can be used if the application already has a localUsers.yml
      ## @param application.security.http.localUsers.username [string, nullable] Set the username of the user
      ## @param application.security.http.localUsers.password [string, nullable] Set the password of the user
      ## @param application.security.http.localUsers.roles [array, nullable] Set the roles of the user. Options: `IbisTester`, `IbisDataAdmin`, `IbisAdmin`, `IbisWebService`, `IbisObserver`
      ## e.g.
      ## localUsers:
      ##   - username: Tester
      ##     password: ChangeMe!
      ##     roles:
      ##        - IbisTester
      ##
      localUsers: []
      ## @param application.security.http.activeDirectory.enabled Enable Active Directory for authentication
      ## @param application.security.http.activeDirectory.url Set url for Active Directory
      ## @param application.security.http.activeDirectory.baseDn Set baseDn for Active Directory users
      ## @param application.security.http.activeDirectory.roleMapping.tester Map the role for Tester
      ## @param application.security.http.activeDirectory.roleMapping.dataAdmin Map the role for DataAdmin
      ## @param application.security.http.activeDirectory.roleMapping.admin Map the role for Admin
      ## @param application.security.http.activeDirectory.roleMapping.webService Map the role for WebService
      ## @param application.security.http.activeDirectory.roleMapping.observer Map the role for Observer
      ##
      activeDirectory:
        enabled: false
        url: ""
        baseDn: ""
        roleMapping:
          tester: ""
          dataAdmin: ""
          admin: ""
          webService: ""
          observer: ""
  server:
    ## @param application.server.transactionManager [string] Set the transaction manager for Tomcat. Options: `NARAYANA`, `BTM`, ``
    ##
    transactionManager: NARAYANA
  ## @param application.properties [object] Set Yaml properties for configuring the Frank!Framework or configurations
  ## properties ref: https://github.com/frankframework/frankframework/blob/master/core/src/main/resources/AppConstants.properties
  ## implementation ref: https://github.com/frankframework/frankframework/blob/master/commons/src/main/java/org/frankframework/util/YamlParser.java
  ##
  properties: {}
  ## @param application.environmentVariables [object] Set extra environment variables for the Frank!
  ##
  environmentVariables: {}
  ## @param application.javaOpts [string] Append custom options to the `JAVA_OPTS` environment variable for the Frank!
  ##
  javaOpts: ""

## @section Frank!Framework console parameters
## @descriptionStart
## The console is a web application that allows you to manage the Frank!Framework.
## Each Frank!Framework instance contains a console, which can be accessed by going to the instance's URL and appending `/iaf/gui`.
## Enabling this additional console will allow you to manage multiple instances of Frank!Framework from a single console.
## It is disabled by default, but can be enabled by setting `console.enabled` to `true`.
## Configuring the console is done by setting the `console.application` parameters. Which can be found in the frank-console chart.
## ref: https://frankframework.github.io/charts/frank-console
## @descriptionEnd
##

## @param console.enabled Enable the Frank!Framework console
##
console:
  enabled: false

## @section Frank!Framework deployment parameters
## @descriptionStart
## The startup probe will enable blue-green deployment, which are great for uptime during upgrades and such.
## It (and the liveness probe) will check if the console is accessible, until a better health endpoint is available.
## The readiness probe will check if all adapters are running using the server health endpoint
## @descriptionEnd
##

## @param replicaCount Number of Frank!Framework replicas to deploy
## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
##
replicaCount: 1

## Configure extra options for Frank!Framework containers' startup probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
## @param startupProbe.httpGet.path Path for startupProbe
## @param startupProbe.httpGet.port Port for startupProbe
##
startupProbe:
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 12
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Configure extra options for Frank!Framework containers' liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
## @param livenessProbe.httpGet.path Path for livenessProbe
## @param livenessProbe.httpGet.port Port for livenessProbe
##
livenessProbe:
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 12
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Configure extra options for Frank!Framework containers' readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
## @param readinessProbe.httpGet.path Path for readinessProbe
## @param readinessProbe.httpGet.port Port for readinessProbe
##
readinessProbe:
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Frank!Framework container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources [object] Set the resources for the Frank!Framework containers
## @param resources.limits [string] The resources limits for the Frank!Framework containers
## @param resources.requests.memory [string] The requested memory for the Frank!Framework containers
## @param resources.requests.cpu [string] The requested cpu for the Frank!Framework containers
## e.g.:
## resources
##   limits:
##     cpu: 2000m
##     memory: 4200M
##   requests:
##     cpu: 2000m
##     memory: 4200M
##
resources: {}

## @skip autoscaling
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## @param terminationGracePeriodSeconds Number of seconds after which pods are forcefully killed
## @extra terminationGracePeriodSeconds Note: Lower values may cause running adapters to fail
terminationGracePeriodSeconds: 60

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Set tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Set affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## @param timeZone used for database connection and log timestamps
##
timeZone: Etc/UTC

## @section Traffic Exposure Parameters
##

## Frank!Framework service parameters
##
service:
  ## @param service.type Frank!Framework service type
  ##
  type: ClusterIP
  ## @param service.port Frank!Framework service port
  port: 80
  ## @param service.annotations Additional annotations for the Frank!Framework service
  ##
  annotations: {}

## Configure the ingress resource that allows you to access the Frank!Framework installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Frank!
  ##
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   kubernetes.io/tls-acme: 'true'
  ##
  annotations: {}
  ## @param ingress.hosts [object] Set hosts for ingress
  ## @param ingress.hosts.host [string, nullable] Set hostname
  ## @param ingress.hosts.paths [array, nullable] Set multiple paths
  ## @param ingress.hosts.paths.path [string, nullable] Set path (context url)
  ## @param ingress.hosts.paths.pathType [string, nullable] Set type of path
  ##
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls [object] Define tls secrets for hosts
  ## e.g.
  ## tls:
  ##   - secretName: chart-example-tls
  ##     hosts:
  ##       - chart-example.local
  ##
  tls: []

## @section Other Parameters
##

## Frank!Framework Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for Frank!Framework pod
  ##
  create: true
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the frankframework.fullname template
  ##
  name: ""

## @param podAnnotations Annotations for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param podLabels Extra labels for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext [object] Set Frank!Framework pod's Security Context
##
podSecurityContext: {}

## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param securityContext [object] Set Frank!Framework container's Security Context
## e.g.
## securityContext: {}
##  capabilities:
##    drop:
##      - ALL
##  readOnlyRootFilesystem: true
##  runAsNonRoot: true
##  runAsUser: 1000
##
securityContext: {}

## @section Persistence
## @descriptionStart
## Persistence is used for keeping heap dumps. They can be found at `/heap-dumps` with persistence enabled.
## Otherwise, they can be found at `/usr/local/tomcat/logs`
## @descriptionEnd
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: false
  ## @param persistence.storageClass Persistent Volume storage class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
  ##
  storageClass: ""
  ## @param persistence.accessModes [array] Persistent Volume access modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Persistent Volume size
  ##
  size: 5Gi
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.selector Selector to match an existing Persistent Volume for the Frank!Framework's data PVC
  ## If set, the PVC can't have a PV dynamically provisioned for it
  ## E.g.
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}
  ## @param persistence.annotations Persistent Volume Claim annotations
  ## You might need to add an annotation for selected node:
  ## E.g: volume.kubernetes.io/selected-node: nodeName
  ## Ref: https://kubernetes.io/docs/reference/labels-annotations-taints/#volume-kubernetes-io-selected-node
  ##
  annotations: {}
