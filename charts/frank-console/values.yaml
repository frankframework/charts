## @section Common parameters
##

## @param nameOverride String to partially override fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override fullname template
##
fullnameOverride: ""

## @section frank-console image parameters
## @descriptionStart
## The image is pulled from nexus.frankframework.org by default. The images located there will be kept for as long as possible.
## Here are the images available:
## https://nexus.frankframework.org/#browse/browse:frankframework-docker:v2%2Ffrankframework%2Ftags/
## If you want to use a specific nightly, you can use the images on docker.io:
## https://hub.docker.com/r/frankframework/frankframework/tags
## @descriptionEnd
##

## frank-console image
## @param image.registry frank-console image registry
## @param image.repository frank-console image repository
## @param image.tag frank-console image tag (immutable tags are recommended)
##
image:
  registry: nexus.frankframework.org
  repository: frank-console
  tag: ""
  ## @param image.pullPolicy frank-console image pull policy
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## @param image.pullSecrets frank-console image pull secrets
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - name: myRegistryKeySecretName
  ##
  pullSecrets: []

## @section frank-console application parameters
##

application:
  ## @param application.memory.percentage Set if the values for the memory are in percentages
  ## @param application.memory.minimum Sets the initial size of the heap that will be used by the frank-console
  ## @param application.memory.maximum Sets the maximum size of the heap that will be used by the frank-console
  ## For Java 8 it is best suited to use the same amount of memory for both the minimum and maximum.
  ## For Java 11 and above, it is possible to use percentages. E.g. minimum: 20.0, maximum: 80.0.
  ## ref: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BABDJJFI
  ##
  memory:
    percentage: false
    minimum: 1G
    maximum: 1G
  security:
    http:
      ## @param application.security.http.authentication Set http authentication for the Frank!
      ##
      authentication: false
      ## @param application.security.http.localUsers [array] Set localUsers who can log in on the Frank!
      ## @extra application.security.http.localUsers Note: If kept empty no localUsers.yml will be generated, this can be used if the application already has a localUsers.yml
      ## @param application.security.http.localUsers.username [string, nullable] Set the username of the user
      ## @param application.security.http.localUsers.password [string, nullable] Set the password of the user
      ## @param application.security.http.localUsers.roles [array, nullable] Set the roles of the user. Options: `IbisTester`, `IbisDataAdmin`, `IbisAdmin`, `IbisWebService`, `IbisObserver`
      ## e.g.
      ## localUsers:
      ##   - username: Tester
      ##     password: ChangeMe!
      ##     roles:
      ##        - IbisTester
      ##
      localUsers: [ ]
      ## @param application.security.http.activeDirectory.enabled Enable Active Directory for authentication
      ## @param application.security.http.activeDirectory.url Set url for Active Directory
      ## @param application.security.http.activeDirectory.baseDn Set baseDn for Active Directory users
      ## @param application.security.http.activeDirectory.roleMapping.tester Map the role for Tester
      ## @param application.security.http.activeDirectory.roleMapping.dataAdmin Map the role for DataAdmin
      ## @param application.security.http.activeDirectory.roleMapping.admin Map the role for Admin
      ## @param application.security.http.activeDirectory.roleMapping.webService Map the role for WebService
      ## @param application.security.http.activeDirectory.roleMapping.observer Map the role for Observer
      ##
      activeDirectory:
        enabled: false
        url: ""
        baseDn: ""
        roleMapping:
          tester: ""
          dataAdmin: ""
          admin: ""
          webService: ""
          observer: ""
  ## @param application.environmentVariables [object] Set extra environment variables for the Frank!
  ##
  environmentVariables: { }
  ## @param application.javaOpts [string] Append custom options to the `JAVA_OPTS` environment variable for the Frank!
  ##
  javaOpts: ""

## @section frank-console deployment parameters
## @descriptionStart
## The startup probe will enable blue-green deployment, which are great for uptime during upgrades and such.
## It (and the liveness probe) will check if the console is accessible, until a better health endpoint is available.
## The readiness probe will check if all adapters are running using the server health endpoint
## @descriptionEnd
##

## @param replicaCount Number of frank-console replicas to deploy
## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
##
replicaCount: 1

## Configure extra options for frank-console containers' startup probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param startupProbe Configure the startup probe
##
startupProbe: {}

## Configure extra options for frank-console containers' liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe Configure the liveness probe
##
livenessProbe: {}

## Configure extra options for frank-console containers' readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param readinessProbe Configure the readiness probe
##
readinessProbe: {}

## frank-console container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources [object] Set the resources for the frank-console containers
## @param resources.limits [string, nullable] The resources limits for the frank-console containers
## @param resources.requests.memory [string, nullable] The requested memory for the frank-console containers
## @param resources.requests.cpu [string, nullable] The requested cpu for the frank-console containers
## e.g.:
## resources
##   limits:
##     cpu: 2000m
##     memory: 4200M
##   requests:
##     cpu: 2000m
##     memory: 4200M
##
resources: {}

## @skip autoscaling
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## @param terminationGracePeriodSeconds Number of seconds after which pods are forcefully killed
## @extra terminationGracePeriodSeconds Note: Lower values may cause running adapters to fail
terminationGracePeriodSeconds: 60

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Set tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Set affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## @param timeZone used for database connection and log timestamps
##
timeZone: Etc/UTC

## @section Traffic Exposure Parameters
##

## frank-console service parameters
##
service:
  ## @param service.type frank-console service type
  ##
  type: ClusterIP
  ## @param service.port frank-console service port
  port: 80
  ## @param service.annotations Additional annotations for the frank-console service
  ##
  annotations: {}

## Configure the ingress resource that allows you to access the frank-console installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Frank!
  ##
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   kubernetes.io/tls-acme: 'true'
  ##
  annotations: {}
  ## @param ingress.hosts [object] Set hosts for ingress
  ## @param ingress.hosts.host [string, nullable] Set hostname
  ## @param ingress.hosts.paths [array, nullable] Set multiple paths
  ## @param ingress.hosts.paths.path [string, nullable] Set path (context url)
  ## @param ingress.hosts.paths.pathType [string, nullable] Set type of path
  ##
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls [object] Define tls secrets for hosts
  ## e.g.
  ## tls:
  ##   - secretName: chart-example-tls
  ##     hosts:
  ##       - chart-example.local
  ##
  tls: []

## @section Other Parameters
##

## frank-console Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for frank-console pod
  ##
  create: true
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the frankframework.fullname template
  ##
  name: ""

## @param podAnnotations Annotations for frank-console pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param podLabels Extra labels for frank-console pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext [object] Set frank-console pod's Security Context
##
podSecurityContext: {}

## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param securityContext [object] Set frank-console container's Security Context
## e.g.
## securityContext: {}
##  capabilities:
##    drop:
##      - ALL
##  readOnlyRootFilesystem: true
##  runAsNonRoot: true
##  runAsUser: 1000
##
securityContext: {}